import numpy as np
from functools import reduce
import matplotlib.pyplot as plt

from materials import Material, materials_dict
import TMM

# TMM - EH - Field at point


c = 299792458
hv = 0.8 * 1.602176634e-19  # Дж
qe = 1.602176634e-19
me0 = 9.10938370153e-31
e0 = 8.8541878128e-12

λ = 1.55e-6
k = 2 * np.pi / λ

I1 = 17e9  # Вт/м^2                        "1"
alpha = 1 / 40
I0 = I1 * alpha  # 0.425  ГВт/м^2          "0"



U = 'Ge'

material = materials_dict[U]
n_ = material.n
a = material.a
me = material.me


print(f'{c} м/с - скорость света')
print(f'{hv} Дж - энергия фотона')
print(f'{qe} Кл - заряд электрона')
print(f'{me0} кг - эффективная масса электрона')
print(f'{e0} Ф*м-1 - электрическая постоянная')
print(f'{λ} м - длина волны излучения лазера')
print(f'{I1} Вт/м^2 - плотность мощности "1"')
print(f'{I0} Вт/м^2 - плотность мощности "0"')

print(U)
print(f'{a} м-1 - показатель поглощения')
print(f'{n_} - коэффициент преломления')
print(f'{me} кг - эффективная масса электрона')

print('')
print('Система СИ')

print('Константы: +')
print('')



# ----------------------------------------------------------- Задание структуры


n_si = 3.48
n_sio2 = 1.44

n = np.array([n_si, n_sio2, n_si, n_sio2, n_]) 	# 3 mirror
N = len(n)  # кол-во слоёв

# hz = np.array([find_L(λ, n[i+1]) for i in range(N-2)])
hz = np.zeros(N-2)


hz[0] = 0.173611 * λ
# hz[1] = 0.115362 * λ		# R = 0.770
hz[1] = 0.116341 * λ		# R = 0.759
# hz[1] = 0.128210 * λ		# R = 0.524
hz[2] = 0.173611 * λ




# ----------------------------------------------------------- Поиск R и T для структуры

D = np.zeros((N-2, 2, 2), dtype=complex)

for j in range(N-2):
	D[j] = TMM.D_trig_(k, n[j+1], hz[j])

F = reduce(np.matmul, [D[i] for i in range(N-3, -1, -1)])
	
r, t = TMM.find_rt(F, n)
R = np.abs(r) ** 2
T = n[-1] / n[0] * np.abs(t) ** 2

print(f'|r|={np.abs(r):.4f}')
print(f'|t|={np.abs(t):.4f}')
print(f'R={R:.4f}')
print(f'T={T:.4f}')

print(f'check {R+T:.4f}')

# ----------------------------------------------------------- Проверка

E0 = 1 + r
H0 = n[0] * (1 - r)

EH1 = F @ [E0, H0]
E1 = EH1[0]

E1_abs = np.abs(E1)
print('')
print('ПРОВЕРКА')
print('')
# print(f'E1={E1:.4f}')
print(f'|E1|={E1_abs:.4f}')
print(f'|E1|^2={n[-1] / n[0] * E1_abs ** 2:.4f}')
print('')

# ----------------------------------------------------------- Распределение поля

h_z = 0.0001 * λ

z_0 = 0.2 * λ
z_1 = np.sum(hz) + z_0
z_i = np.arange(-z_0, z_1, h_z)

E_z = np.zeros_like(z_i, dtype=complex)

edge = [np.sum(hz[:Ni]) for Ni in range(N-1)]
edge = edge + [z_1]

z_shift = [0] + edge

# ----------------------------------------------------------- через амплитуды

# A = np.full(N, None, dtype=object)
#
# A[0] = [1, r]
# A[1] = TMM.M_(n[0], n[1]) @ A[0]
# A[2] = TMM.M_(n[1], n[2]) @ TMM.P_(k, n[1], hz[0]) @ A[1]
# A[3] = TMM.M_(n[2], n[3]) @ TMM.P_(k, n[2], hz[1]) @ A[2]
# A[4] = TMM.M_(n[3], n[4]) @ TMM.P_(k, n[3], hz[2]) @ A[3]
#
# for i, z in enumerate(z_i):
#
# 	for j in range(N):
# 		if z <= edge[j]:
# 			E_z[i] = np.sum(TMM.P_(k, n[j], z - z_shift[j]) @ A[j])
# 			break

# ----------------------------------------------------------- через поля

E0 = 1 + r
H0 = n[0] * (1 - r)

EH = np.full(N, None, dtype=object)

# Предрассчитанные поля в начале каждой области
EH[0] = np.array([E0, H0])
EH[1] = EH[0]
for	i in range(1, N-1):
	EH[i+1] = TMM.D_trig_(k, n[i], hz[i-1]) @ EH[i]


for i, z in enumerate(z_i):
	for j in range(N):
		if z <= edge[j]:
			E_z[i] = (TMM.D_trig_(k, n[j], z - z_shift[j]) @ EH[j])[0]
			break

# ----------------------------------------------------------- график


I = np.abs(E_z) ** 2
print(f'I[-1]={n[-1] / n[0] * I[-1]:.4f}') 	# check,	if = T => fine
print(f'1/40 = {1/40:.4f}')
print(f'1/T = {1/T:.4f}')

plt.figure()
plt.plot(z_i * 1e6, I, color='k', linewidth=1.5)


for b in range(len(edge)-1):
	plt.axvline(edge[b] * 1e6, color='gray', linestyle='--', linewidth=1.5)

plt.ylim(0, np.max(I)+0.5)
# plt.xlim(0.7, 1.95)

plt.xlabel("Длина, мкм")
plt.ylabel("|E|²")
plt.grid(linewidth=0.4)

plt.tight_layout()
plt.show()
