import numpy as np
from functools import reduce
import matplotlib.pyplot as plt
import time

from materials import Material, materials_dict
import TMM


# TMM - EH - time, impulse



start_time = time.time()

c = 299792458
hv = 0.8 * 1.602176634e-19  # Дж
qe = 1.602176634e-19
me0 = 9.10938370153e-31
e0 = 8.8541878128e-12

λ = 1.55e-6
k = 2 * np.pi / λ

I1 = 17e9  # Вт/м^2		"1"
K = 1 / 4
I0 = I1 * K			#	"0"




U = 'Ge'

material = materials_dict[U]
n_ = material.n
a = material.a
me = material.me


print(f'{c} м/с - скорость света')
print(f'{hv} Дж - энергия фотона')
print(f'{qe} Кл - заряд электрона')
print(f'{me0} кг - эффективная масса электрона')
print(f'{e0} Ф*м-1 - электрическая постоянная')
print(f'{λ} м - длина волны излучения лазера')
print(f'{I1} Вт/м^2 - плотность мощности "1"')
print(f'{I0} Вт/м^2 - плотность мощности "0"')

print(U)
print(f'{a} м-1 - показатель поглощения')
print(f'{n_} - коэффициент преломления')
print(f'{me} кг - эффективная поперечная масса электрона')

print('')
print('Система СИ')

print('')
print('')


# ----------------------------------------------------------- Задание структуры


n_si = 3.48
n_sio2 = 1.44




n = np.array([n_si, n_sio2, n_si, n_sio2, n_, n_sio2, n_si, n_sio2, n_si], dtype=np.float16)
N_nl = 4


N = len(n)  # кол-во слоёв
hz = np.zeros(N-2)


# -------------------------------- 3 layer mirror
h_sio2 = 0.173611 * λ		# λ/4n

# h_si_ = 0.128210 * λ		# R = 0.524
# h_si_ = 0.116341 * λ		# R = 0.759 - потери ~22%
h_si_ = 0.115362 * λ		# R = 0.77 - потери ~24%
# h_si_ = 0.114411 * λ		# R = 0.78 - потери ~29%
# h_si_ = 0.175118 * λ		# R = 0.8 - слабое поле в Ge


hz[0] = h_sio2
hz[1] = h_si_
hz[2] = h_sio2


# hz[N_nl-1] = 0.112073 * λ
# hz[N_nl-1] = 0.109523 * λ
# hz[N_nl-1] = 0.107851 * λ
# hz[N_nl-1] = 0.105947 * λ
hz[N_nl-1] = 0.103630 * λ		# T_max
# hz[N_nl-1] = 0.101313 * λ
# hz[N_nl-1] = 0.099409 * λ

# аналитика
# hz[3] = 0.137255 * λ		# R = 0.759
# hz[3] = 0.294118 * λ		# R = 0.524

hz[4] = h_sio2
hz[5] = h_si_
hz[6] = h_sio2


# ----------------------------------------------------------- сетка


z_0 = 0.2 * λ
z_1 = np.sum(hz[:N_nl-1])
z_i = np.arange(-z_0, z_1, 0.0001 * λ)		# левая половина

z_2 = np.sum(hz[:N_nl])
z_3 = np.sum(hz) + z_0
z_j = np.arange(z_2, z_3, 0.0001 * λ)		# правая половина

h_nl = 0.0001 * λ
z_nl = np.arange(z_1, z_2, h_nl)			# нелинейный слой

edge = [np.sum(hz[:Ni]) for Ni in range(N-1)]
edge = edge + [z_3]

z_shift = [0] + edge


# ----------------------------------------------------------- Импульс

# ------------------ Прямоугольный импульс
# tau = 1e-9
# h_t = 25e-12
# t_i = np.arange(0, tau, h_t)
# N_t = len(t_i)
#
# I_t0 = np.full(N_t, I0, dtype=np.float64)
# I_t1 = np.full(N_t, I1, dtype=np.float64)
# S0 = integral_(I_t0, h_t)
# S1 = integral_(I_t1, h_t)
#
# I = I_t0


# ------------------ Гаусс
def gauss_(tau_, t_):
	gauss = np.exp(-2 * (t_ - 2 * tau_) ** 2 / tau_ ** 2)
	return gauss

tau = 4e-9
h_t = 50e-12
t_i = np.arange(0, 4 * tau, h_t)
N_t = len(t_i)

I_t0 = gauss_(tau, t_i) * I0
I_t1 = gauss_(tau, t_i) * I1
S0 = TMM.integral_(I_t0, h_t)
S1 = TMM.integral_(I_t1, h_t)

I = I_t0


# ------------------ основной цикл
I_tau = np.zeros(N_t, dtype=np.float64)

n_in = np.full(len(z_nl), n[N_nl])

for t in range(N_t):

	D = np.zeros((N-2, 2, 2), dtype=np.complex128)
	D_nl = np.zeros((len(n_in), 2, 2), dtype=np.complex128)
	
	for j in range(N-2):
		if j == N_nl-1:
			for i in range(len(n_in)):
				# D_nl[i] = D_trig_(k, n_in[i], h_nl)			# без поглощения
				D_nl[i] = TMM.D_trig_absorb_(k, a, n_in[i], h_nl)
		else:
			D[j] = TMM.D_trig_(k, n[j+1], hz[j])
	
	D[N_nl-1] = reduce(np.matmul, [D_nl[i] for i in range(len(n_in)-1, -1, -1)])
	F = reduce(np.matmul, [D[i] for i in range(N-3, -1, -1)])
	
	r_, t_ = TMM.find_rt(F, n)
	R = np.abs(r_) ** 2
	T = n[-1] / n[0] * np.abs(t_) ** 2
	
	if t % 50 == 0:
		print(f'|r|={np.abs(r_):.4f}')
		print(f'|t|={np.abs(t_):.4f}')
		print(f'R={R:.4f}')
		print(f'T={T:.4f}')
		
		print(f'check {R+T:.4f}')		 # if a > 0 => R+T < 0
		print('')

# ----------------------------------------------------------- Распределение поля
	
	E_z_l = np.zeros_like(z_i, dtype=np.complex128)
	E_z_nl = np.zeros_like(z_nl, dtype=np.complex128)
	E_z_r = np.zeros_like(z_j, dtype=np.complex128)

	# ----------------------------------------------------------- через поля
	
	E0 = 1 + r_
	H0 = n[0] * (1 - r_)
	
	EH = np.full(N, None, dtype=object)
	
	EH[0] = np.array([E0, H0])
	EH[1] = EH[0]
	
	
	# ------------------------------ падающее + отражённое поле и левое зеркало
	for	i in range(1, N_nl):
		EH[i+1] = TMM.D_trig_(k, n[i], hz[i-1]) @ EH[i]
	# можем только левое зеркало просчитать заранее
	# 	в нелинейном слое поле на выходе заранее неизвестно
	
	for i, z in enumerate(z_i):
		for j in range(N_nl):
			if z <= edge[j]:
				E_z_l[i] = (TMM.D_trig_(k, n[j], z - z_shift[j]) @ EH[j])[0]
				break
	
	
	# ------------------------------ нелинейный слой
	
	EH_nl = np.zeros((len(n_in) + 1, 2), dtype=np.complex128)
	EH_nl[0] = EH[N_nl]
	
	
	for i, z in enumerate(z_nl):
		EH_nl[i + 1] = TMM.D_trig_absorb_(k, a, n_in[i], h_nl) @ EH_nl[i]
		# EH_nl[i + 1] = D_trig_(k, n_in[i], h_nl) @ EH_nl[i]	# без поглощения
		E_z_nl[i] = EH_nl[i][0]
	
	EH[N_nl + 1] = EH_nl[-1]
	
	n_in += TMM.find_dn_(E_z_nl, I[t], h_t, hv, qe, me, e0, c, k, a, n[N_nl], n[0])
	
	# ------------------------------ правое зеркало и прошедшее поле
	for j in range(N_nl + 1, N-1):
		EH[j+1] = TMM.D_trig_(k, n[j], hz[j-1]) @ EH[j]
	# только когда знаем поле на выходе из нелинейного слоя
	# 	можем посчитать правое зеркало
	
	for i, z in enumerate(z_j):
		for j in range(N_nl+1, N):
			if z <= edge[j]:
				E_z_r[i] = (TMM.D_trig_(k, n[j], z - z_shift[j]) @ EH[j])[0]
				break
	
	E_z = np.concatenate([E_z_l, E_z_nl, E_z_r])
	z_all = np.concatenate([z_i, z_nl, z_j])
	It = np.abs(E_z) ** 2
	I_tau[t] = n[-1] / n[0] * It[-1] * I[t]
	
	
	
	

# ----------------------------------------------------------- график распределения поля в момент t
	if t == N_t - 1 or t == 0:
	# if t == N_t:	# no out
		print(f'I[-1]={It[t]:.4f}') 	# check,	if = T => fine
		print(f'1/40 = {1/40:.4f}')
		print(f'1/T = {1/T:.4f}')
		
		plt.figure()
		plt.plot(z_all * 1e6, It, color='k', linewidth=1.5)
		
		for b in range(len(edge)-1):
			if b == N_nl-1 or b == N_nl:
				plt.axvline(edge[b] * 1e6, color='red', linestyle='--', linewidth=1.5)
			else:
				plt.axvline(edge[b] * 1e6, color='gray', linestyle='--', linewidth=1.5)
		
		plt.ylim(0, np.max(It)+0.5)
		# plt.xlim(0.7, 1.95)
		
		# plt.title(f"t={t_i[t]}, I={np.max(I)/I1:.2f}")
		plt.xlabel("Длина, мкм")
		plt.ylabel("|E|²")
		plt.grid(linewidth=0.4)
		
		plt.tight_layout()
		plt.show()
		
	if t == N_t - 1:
		print(f"-------------------")
		end_time = time.time()
		time_ = end_time - start_time
		print(f"t_time = {t}_{time_:.6f} сек")
		print('')

# ----------------------------------------------------------- график импульса до/после ограничения

S = TMM.integral_(I_tau, h_t)



print('')
print(f"-------------------")
print(f'S0 = {S0:.4f}')
print(f'S1 = {S1:.4f}')
print(f'S = {S:.4f}')
print('')

if np.round(np.max(I)/I1, 2) == 0.25:
	print(f'I = {np.max(I)/I1:.4f}')
	print(f'потери для I0, % =  {(1-S/S0) * 100:.2f}')

if np.round(np.max(I)/I1, 2) == 1.00:
	print(f'I = {np.max(I)/I1:.4f}')
	print(f'огр-е I1/I0 -> {1/10}: S/S0 = {S/S0:.4f} ; {S0/S:.4f} ')
	print(f'огр-е out/in -> {1/40}: S/S1 = {S/S1:.4f} ; {S1/S:.4f} ')


# plt.figure()
# plt.plot(t_i * 1e9, I_t0, color='k', linewidth=1.5)
# plt.title("До")
# plt.xlabel("Время, нс")
# plt.ylabel("|E|²")
# plt.grid(linewidth=0.4)
#
# plt.tight_layout()
# plt.show()

plt.figure()
# plt.axhline(I, color='red', linestyle='--', linewidth=1.5)		# Прямоугольный
plt.plot(t_i * 1e9, I, color='r', linestyle='--', linewidth=1.5)	# Гаусс
plt.plot(t_i * 1e9, I_tau, color='k', linewidth=1.5)
# plt.title(f"После, I={np.max(I)/I1:.2f}, t={tau}")
plt.xlabel("Время, нс")
plt.ylabel("|E|²")
plt.grid(linewidth=0.4)

plt.tight_layout()
plt.show()


# plt.figure()
# plt.axhline(n_, color='k', linestyle='--', linewidth=1.5)
# plt.plot(z_nl * 1e6, n_in, color='k', linewidth=1.5)
# # plt.title("")
# plt.xlabel("Длина, мкм")
# plt.ylabel("n")
# plt.grid(linewidth=0.4)
#
# plt.tight_layout()
# plt.show()
