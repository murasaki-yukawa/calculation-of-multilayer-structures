import numpy as np
from functools import reduce
import matplotlib.pyplot as plt

from materials import Material, materials_dict
import TMM
import Airy

# TMM - EH - Find L for defined value R


c = 299792458
hv = 0.8 * 1.602176634e-19  # Дж
qe = 1.602176634e-19
me0 = 9.10938370153e-31
e0 = 8.8541878128e-12

λ = 1.55e-6

I1 = 17e9  # Вт/м^2                        "1"
alpha = 1 / 40
I0 = I1 * alpha  # 0.425  ГВт/м^2          "0"



U = 'Ge'

material = materials_dict[U]
n_ = material.n
a = material.a
me = material.me


print(f'{c} м/с - скорость света')
print(f'{hv} Дж - энергия фотона')
print(f'{qe} Кл - заряд электрона')
print(f'{me0} кг - эффективная масса электрона')
print(f'{e0} Ф*м-1 - электрическая постоянная')
print(f'{λ} м - длина волны излучения лазера')
print(f'{I1} Вт/м^2 - плотность мощности "1"')
print(f'{I0} Вт/м^2 - плотность мощности "0"')

print(U)
print(f'{a} м-1 - показатель поглощения')
print(f'{n_} - коэффициент преломления')
print(f'{me} кг - эффективная масса электрона')

print('')
print('Система СИ')

print('Константы: +')
print('')



# ----------------------------------------------------------------------------

n_si = 3.48
n_sio2 = 1.44

n = np.array([n_si, n_sio2, n_si, n_sio2, n_])
# n = np.array([n_si, n_sio2, n_si, n_sio2, n_si, n_])



N = len(n)  # кол-во слоёв

hz = np.zeros(N)

hz1 = 0.173611 * λ
hz2 = np.linspace(0, λ/4, 10000)
hz3 = 0.173611 * λ
# hz4 = 0.071839 * λ



# hz1 / λ ≈ 0.1736
# hz2 / λ ≈ 0.1163	#	0.759
# hz2 / λ ≈ 0.1282	#	0.524
# hz3 / λ ≈ 0.1736



R = np.zeros_like(hz2)
T = np.zeros_like(hz2)

k = 2 * np.pi / λ

for i, length in enumerate(hz2):
	
	D = np.zeros((N-2, 2, 2), dtype=complex)

	D[0] = TMM.D_trig_(k, n[1], hz1)
	D[1] = TMM.D_trig_(k, n[2], length)
	D[2] = TMM.D_trig_(k, n[3], hz3)
	# D[3] = TMM.D_trig_(k, n[4], hz4)

	F = reduce(np.matmul, [D[i] for i in range(N-3, -1, -1)])
	
	r_, t_ = TMM.find_rt(F, n)
	R[i], T[i] = np.abs(r_) ** 2, n[-1] / n[0] * np.abs(t_) ** 2


target_R = 0.76

λ_4n = λ/(4 * n_si)
λ_2n = λ/(2 * n_si)
λ_4n_idx = np.argmin(np.abs(hz2 - λ_4n))
λ_2n_idx = np.argmin(np.abs(hz2 - λ_2n))

R_slice = R[λ_4n_idx:λ_2n_idx]
hz2_slice = hz2[λ_4n_idx:λ_2n_idx]
idx = np.argmin(np.abs(R_slice - target_R))

hz2_at_target = hz2_slice[idx]
R_value = R_slice[idx]

print(f"hz2 / λ ≈ {hz2_at_target / λ:.6f}")
print(f"hz2 ≈ {hz2_at_target * 1e9:.6f} нм")
print(f"R ≈ {R_value:.4f}")
print('')
print(f"hz1 / λ ≈ {hz1 / λ:.4f}")
print(f"hz3 / λ ≈ {hz3 / λ:.4f}")
# print(f"hz4 / λ ≈ {hz4 / λ:.4f}")
print(f"R_max = {np.max(R):.4f}")


plt.figure()
plt.plot(hz2/λ, R, label="Отражение (R)")
plt.plot(hz2/λ, T, label="Пропускание (T)")
plt.axhline(target_R, color='r', linestyle='--', label=f"R={target_R}")
plt.axvline(hz2_at_target / λ, color='r', linestyle='--', label=f"hz={hz2_at_target / λ:.4f}")
plt.axvline(1/(4 * n_si), color='k', linestyle='--', label=f"λ/4n")
plt.axvline(1/(2 * n_si), color='g', linestyle='--', label=f"λ/2n")

# plt.xlim(0, 1)
plt.ylim(0, 1)
plt.xlabel("длина, λ")
# plt.ylabel("Пропускание")
plt.legend()
plt.grid()

plt.tight_layout()
plt.show()
